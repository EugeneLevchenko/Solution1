@page "{handler?}"
@using ClassLibrary1.Domain.Entities
@model WebApplication1.Pages.Auctions.IndexModel
@{
    ViewData["Title"] = "Auctions";
}

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f7fa;
        margin: 0;
        padding: 20px;
    }

    h1 {
        color: #2c3e50;
        text-align: center;
        margin-bottom: 20px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        background-color: #ffffff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .table th {
            background-color: #3498db;
            color: white;
        }

        .table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .table tr:hover {
            background-color: #e9ecef;
        }

    .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
    }

    .btn-success {
        background-color: #2ecc71;
        color: white;
    }

    .btn:hover {
        opacity: 0.9;
    }

    p {
        color: #7f8c8d;
        text-align: center;
    }

    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background-color: #fff;
        margin: 15% auto;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        text-align: center;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover {
            color: #000;
        }

    #editForm input {
        width: 100%;
        padding: 8px;
        margin: 10px 0;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    #editForm button {
        padding: 8px 16px;
        margin-right: 10px;
    }
</style>

<h1>Auctions</h1>

@if (Model.Auctions == null || !Model.Auctions.Any())
{
    <p>No auctions found for the selected source.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>SourceId</th>
                <th>Id</th>
                <th>Name</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var auction in Model.Auctions)
            {
                <tr>
                    <td>@auction.SourceId</td>
                    <td>@auction.Id</td>
                    <td><a href="/Lots/Details?id=@auction.Id" style="color: #3498db; text-decoration: none;">@auction.Name</a></td>
                    <td>@auction.Status</td>
                    <td>
                        <button class="btn btn-primary edit-btn" data-id="@auction.Id" data-name="@auction.Name" data-source-id="@auction.SourceId">Edit</button>
                        <button class="btn btn-danger delete-btn" data-id="@auction.Id" @(auction.Status == Status.Deleted ? "disabled" : "")>Delete</button>
                        <button class="btn btn-success recover-btn" data-id="@auction.Id" @(auction.Status == Status.Pending ? "disabled" : "")>Recover</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal for Edit -->
<div id="editModal" class="modal">
    <div class="modal-content">
        <h3>Edit Auction</h3>
        <form id="editForm" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="editAuctionId" name="Id" />
            <input type="text" id="editAuctionName" name="Name" placeholder="Auction Name" required />
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary">Cancel</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const modal = document.getElementById('editModal');
        const editForm = document.getElementById('editForm');

        // Open Edit Modal
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', () => {
                const auctionId = button.getAttribute('data-id');
                const auctionName = button.getAttribute('data-name');
                const sourceId = parseInt(button.getAttribute('data-source-id'), 10) || 1;
                document.getElementById('editAuctionId').value = auctionId;
                document.getElementById('editAuctionName').value = auctionName;
                modal.style.display = 'block';
            });
        });

        // Cancel Button
        const cancelButton = editForm.querySelector('.btn-secondary');
        cancelButton.addEventListener('click', () => {
            closeModal();
        });

        // Submit Edit Form
            editForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const auctionId = document.getElementById('editAuctionId').value;
        const newName = document.getElementById('editAuctionName').value.trim();
        const sourceId = parseInt(document.querySelector('.edit-btn[data-id="' + auctionId + '"]').getAttribute('data-source-id'), 10) || 1;

        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        const response = await fetch('/Auctions?handler=Update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({ Id: parseInt(auctionId, 10), Name: newName, SourceId: sourceId })
        });

        if (response.ok) {
            closeModal();
            const updatedAuction = await response.json();
            const rows = document.querySelectorAll('tr td:nth-child(2)');
            let foundRow = null;
            rows.forEach(td => {
                if (td.textContent === auctionId) {
                    foundRow = td.closest('tr');
                }
            });
            if (foundRow) {
                foundRow.cells[2].querySelector('a').textContent = updatedAuction.name;
            } else {
                console.log('Error: Row with ID ' + auctionId + ' not found');
            }
        } else {
            const errorText = await response.text();
            console.log('Error response:', errorText);
            alert('Не удалось обновить аукцион. Статус: ' + response.status + '\n' + errorText);
        }
    });

        // Delete Action
        document.querySelectorAll('.delete-btn').forEach(button => {
            button.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete this auction?')) {
                    const auctionId = button.getAttribute('data-id');
                    console.log('Debug: auctionId from data-id:', auctionId);
                    const parsedId = parseInt(auctionId, 10);
                    console.log('Debug: parsedId:', parsedId);
                    if (isNaN(parsedId)) {
                        alert('Invalid auction ID');
                        return;
                    }
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    const response = await fetch('/Auctions?handler=Delete', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ Id: parsedId })
                    });

                    if (response.ok) {
                        const updatedAuction = await response.json();
                        const rows = document.querySelectorAll('tr td:nth-child(2)');
                        let foundRow = null;
                        rows.forEach(td => {
                            if (td.textContent === auctionId) {
                                foundRow = td.closest('tr');
                            }
                        });
                        if (foundRow) {
                            const statusText = updatedAuction.status === 1 ? 'Deleted' : 'Pending';
                            foundRow.cells[3].textContent = statusText;
                            const deleteBtn = foundRow.querySelector('.delete-btn');
                            const recoverBtn = foundRow.querySelector('.recover-btn');
                            if (statusText === 'Deleted') {
                                deleteBtn.disabled = true;
                                recoverBtn.disabled = false;
                            } else {
                                deleteBtn.disabled = false;
                                recoverBtn.disabled = true;
                            }
                        }
                    } else {
                        const errorText = await response.text();
                        console.log('Error response:', errorText);
                        alert('Failed to change status. Status: ' + response.status + '\n' + errorText);
                    }
                }
            });
        });

        // Recover Action
        document.querySelectorAll('.recover-btn').forEach(button => {
            button.addEventListener('click', async () => {
                if (confirm('Are you sure you want to recover this auction?')) {
                    const auctionId = button.getAttribute('data-id');
                    console.log('Debug: auctionId from data-id:', auctionId);
                    const parsedId = parseInt(auctionId, 10);
                    console.log('Debug: parsedId:', parsedId);
                    if (isNaN(parsedId)) {
                        alert('Invalid auction ID');
                        return;
                    }
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    const response = await fetch('/Auctions?handler=Recover', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ Id: parsedId })
                    });

                    if (response.ok) {
                        const updatedAuction = await response.json();
                        const rows = document.querySelectorAll('tr td:nth-child(2)');
                        let foundRow = null;
                        rows.forEach(td => {
                            if (td.textContent === auctionId) {
                                foundRow = td.closest('tr');
                            }
                        });
                        if (foundRow) {
                            const statusText = updatedAuction.status === 1 ? 'Deleted' : 'Pending';
                            foundRow.cells[3].textContent = statusText;
                            const deleteBtn = foundRow.querySelector('.delete-btn');
                            const recoverBtn = foundRow.querySelector('.recover-btn');
                            if (statusText === 'Deleted') {
                                deleteBtn.disabled = true;
                                recoverBtn.disabled = false;
                            } else {
                                deleteBtn.disabled = false;
                                recoverBtn.disabled = true;
                            }
                        }
                    } else {
                        const errorText = await response.text();
                        console.log('Error response:', errorText);
                        alert('Failed to change status. Status: ' + response.status + '\n' + errorText);
                    }
                }
            });
        });

        function closeModal() {
            modal.style.display = 'none';
        }
    });
</script>